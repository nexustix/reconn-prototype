     Bottom  --> Top
name (       --       ) - description

# stack manipulation
drop (     a --       ) - drop first item on stack
swap (   b a -- a b   ) - swap first and second stack item
dup  (     a -- a a   ) - duplicate fisrt stack item
over (   b a -- b a b ) - make copy of second item and push on top
rot  ( c b a -- b a c ) - rotates third stack item to the top

# arithmetic
+    (   b a -- c     ) - do (+ b a), push result on the stack
-    (   b a -- c     ) - do (- b a), push result on the stack
*    (   b a -- c     ) - do (* b a), push result on the stack
/mod (   b a -- d c   ) - do (/ b a), push remainder, push quotient

# comparison
=    (   b a -- c     ) - top two words equal ?
<>   (   b a -- c     ) - top two words not equal ?
<    (   b a -- c     ) - less than ?
>    (   b a -- c     ) - greater than ?
<=   (   b a -- c     ) - less or equal ?
>=   (   b a -- c     ) - greater or equal ?
0=   (   b a -- c     ) - equal to zero ?
0<>  (   b a -- c     ) - not equal to zero ?
0<   (   b a -- c     ) - less than zero ?
0>   (   b a -- c     ) - greater than zero ?
0<=  (   b a -- c     ) - less or equal to zero ?
0>=  (   b a -- c     ) - greater or equal to zero ?

# logic
and  (   b a -- c     ) - logical and
or   (   b a -- c     ) - logical or
xor  (   b a -- c     ) - logical xor
not  (   b a -- c     ) - logical not

# special
exit




// TODO evaluate (jonesforth)
rot  ( c b a -- a c b ) - rotates first stack item below third stack item
-rot ( c b a -- b a c ) - rotates third stack item to the top
?dup (     ? -- ? ?   ) - duplicates top of stack if non-zero
1+   (     a -- b     ) - increment top of stack by 1
1-   (     a -- b     ) - decrement top of stack by 1
4+   (     a -- b     ) - increment top of stack by 4
4-   (     a -- b     ) - decrement top of stack by 4
and  (   b a -- c     ) - bitwise and
or   (   b a -- c     ) - bitwise or
xor  (   b a -- c     ) - bitwise xor
not  (   b a -- c     ) - bitwise not
